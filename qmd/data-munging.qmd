---
params:
  series: "historical-climate-data"
  resolution: "10m"
  model: NULL
  country_code: "bra"
---

# Log√¥nia: Netlogia Brasiliensis Growth Response Model in NetLogo

## Overview

This document provides a step-by-step guide to process the [WorldClim 2.1](https://worldclim.org/) data **for this model**. It follows the download process outlined in the [qmd/data-download.qmd](data-download.qmd) document. To use it, you must have already downloaded and unzipped the WorldClim 2.1 data files.

For a detailed pipeline on how to process the data, please refer to the [`LogoClim`](https://github.com/sustentarea/logoclim) model notebooks.

::: {.callout-important}
This process may take some time to complete. Please be patient.
:::

## Set the Environment

::: {.callout-important}
Notice date: 2025-04-09

The `terra` package may encounter issues when exporting data to ASCII format. If this happens, you can resolve it by installing the development version of the package from GitHub using the following command:

```r
# install.packages("remotes")
remotes::install_github("rspatial/terra")
```
:::

```{r}
library(beepr)
library(fs)
library(geodata)
library(here)
library(magrittr)
library(orbis) # github.com/sustentarea/orbis
library(rutils) # github.com/sustentarea/rutils
library(stringr)
library(terra)
library(zip) # OS independent
```

```{r}
source(here("R", "wc_license.R"))
```

## Set the Initial Variables

### Options

```{r}
options(cli.progress_show_after = 0)
```

```{r}
#| eval: false

series <- "historical-monthly-weather-data"
```

```{r}
#| eval: false

resolution <- "10m"
```

```{r}
#| eval: false

model <- NULL
```

### Directories

```{r}
raw_data_dir <- here("data-raw")
```

```{r}
raw_data_wc_dir <- path(raw_data_dir, "worldclim")
```

```{r}
raw_data_wc_series_dir <- path(raw_data_wc_dir, series)
```

```{r}
raw_data_wc_series_res_dir <- path(
  raw_data_wc_dir,
  series,
  resolution |> str_replace_all("\\.", "\\-")
)
```

```{r}
data_dir <- here("data")
```

```{r}
data_series_dir <- path(data_dir, series)
```

```{r}
dirs <- c(
  raw_data_dir, raw_data_wc_dir, raw_data_wc_series_dir,
  raw_data_wc_series_res_dir, data_dir, data_series_dir
)

for (i in dirs) {
  if (!dir_exists(i)) {
    dir_create(i, recurse = TRUE)
  }
}
```

### Shape

See: <http://bboxfinder.com/#-7.5,-63.5,0,-56>

```{r}
#| eval: false

# xmin, xmax, ymin, ymax
box <- c(-63.5, -56, -7.5, 0)
```

## Gather the `tif` Files

```{r}
tif_dir <- path(raw_data_wc_series_res_dir, "tif")
```

```{r}
tif_files <-
  tif_dir |>
  dir_ls(type = "file", regexp = "tif$", recurse = TRUE)
```

## Test the Files (Optional)

```{r}
#| eval: false

tif_file <- tif_files |> sample(1)
```

```{r}
#| eval: false

raster <- tif_file |> rast()
```

```{r}
#| eval: false

if (!is.null(box)) cropped_ras <- raster |> crop(box)
```

```{r}
#| eval: false

cropped_ras |> plot()
```

## Crop and Transform the Data to ASCII

```{r}
#| output: false

wc_to_ascii(
  file = tif_files,
  dir = data_series_dir,
  shape = NULL,
  box = box,
  dateline_fix = FALSE,
  aggregate = NULL,
  overwrite = TRUE,
  dx = -45,
  na_flag = -9999
)

beep(1)
```

## Add LICENSE and README Files

```{r}
for (i in c(data_dir, data_series_dir)) {
  wc_license() |> write_lines(path(i, "LICENSE.md"))
}
```

## Delete Non-ASCII Files (Optional)

```{r}
#| eval: false

data_series_dir |>
  dir_ls(
    type = "file",
    regexp = "asc$",
    invert = TRUE
  ) |>
  file_delete()
```
