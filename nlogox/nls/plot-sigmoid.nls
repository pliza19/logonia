; globals [
;   x-axis
;   min-x
;   max-x
;   intercept
;   beta-tmin
;   beta-tmax
;   beta-prec
;   inspection-tmin
;   inspection-tmax
;   inspection-prec
; ]

to plot-sigmoid
  if (min-x >= max-x) [set max-x min-x + 1]
  if (max-x <= min-x) [set min-x max-x - 1]

  let #var ""
  let #step-size 0.1
  let #current-x min-x
  let #linear-predictor 0
  let #probability 0

  let #intercept intercept
  let #tmin inspection-tmin
  let #tmax inspection-tmax
  let #prec inspection-prec

  (ifelse (x-axis = "Intercept") [
    set #intercept #current-x
  ] (x-axis = "Average Minimum Temperature (째C)") [
    set #tmin #current-x
  ] (x-axis = "Average Maximum Temperature (째C)") [
    set #tmax #current-x
  ] (x-axis = "Total Precipitation (mm)") [
    set #prec #current-x
  ])

  set-current-plot "Sigmoid"
  clear-plot
  set-plot-x-range min-x max-x

  while [#current-x <= max-x] [
    set #linear-predictor (
      #intercept +
      beta-tmin * #tmin +
      beta-tmax * #tmax +
      beta-prec * #prec
    )

    set #probability (1 / (1 + exp(- #linear-predictor)))

    plotxy #current-x #probability

    set #current-x (#current-x + #step-size)

    (ifelse (x-axis = "Intercept") [
      set #intercept #current-x
    ] (x-axis = "Average Minimum Temperature (째C)") [
      set #tmin #current-x
    ] (x-axis = "Average Maximum Temperature (째C)") [
      set #tmax #current-x
    ] (x-axis = "Total Precipitation (mm)") [
      set #prec #current-x
    ])
  ]
end
